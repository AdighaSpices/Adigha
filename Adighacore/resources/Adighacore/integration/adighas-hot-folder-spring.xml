<?xml version="1.0" encoding="UTF-8"?>
<!--
 [y] hybris Platform

 Copyright (c) 2000-2016 SAP SE or an SAP affiliate company.
 All rights reserved.

 This software is the confidential and proprietary information of SAP
 ("Confidential Information"). You shall not disclose such Confidential
 Information and shall use it only in accordance with the terms of the
 license agreement you entered into with SAP.
-->


<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:int="http://www.springframework.org/schema/integration"
       xmlns:file="http://www.springframework.org/schema/integration/file"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/integration
		http://www.springframework.org/schema/integration/spring-integration.xsd
	    http://www.springframework.org/schema/integration/file
	    http://www.springframework.org/schema/integration/file/spring-integration-file.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
        
     <context:annotation-config/>
     
     <!-- General setup -->
    <int:channel id="myChannel" />
    <int:service-activator input-channel="myChannel" ref="errorHandler" method="onError" />
    <bean id="errorHandler" class="de.hybris.platform.acceleratorservices.dataimport.batch.task.ErrorHandler">
        <property name="cleanupHelper" ref="cleanupHelper" />
    </bean>
    <bean id="cleanupHelper" class="de.hybris.platform.acceleratorservices.dataimport.batch.task.CleanupHelper">
        <property name="timeStampFormat" value="yyyyMMddHHmmssSSS" />
    </bean>
    
     <bean id="fileOrderComparator" class="de.hybris.platform.acceleratorservices.dataimport.batch.FileOrderComparator">
        <property name="prefixPriority">
            <map>
                <!-- default priority is 0 -->
                <entry key="product" value="20" />
            </map>
        </property>
    </bean>
    
    <bean id="adighasImportBaseDirectory" class="java.lang.String">
        <constructor-arg value="#{configurationService.configuration.getProperty('Adighacore.batch.impex.basefolder')}" />
    </bean>
      <!-- Impex import process -->
    <!-- 1) Scan for files, site dependent -->
     <file:inbound-channel-adapter id="batchFilesAdighas" directory="#{adighasImportBaseDirectory}"
                                  filename-regex="^(.*)-(\d+)\.csv" comparator="fileOrderComparator">
        <int:poller fixed-rate="1000" />
    </file:inbound-channel-adapter>
     <!-- 2) move the file to processing and create header -->
    <file:outbound-gateway request-channel="batchFilesAdighas" reply-channel="batchFilesAdighasProc"
                           directory="#{adighasImportBaseDirectory}/processing" delete-source-files="true" />
                           
    <int:service-activator input-channel="batchFilesAdighasProc" output-channel="batchFilesHeaderInit" ref="adighasHeaderSetupTask"
                           method="execute" />
	 <bean id="adighasHeaderSetupTask" class="de.hybris.platform.acceleratorservices.dataimport.batch.task.HeaderSetupTask">
        <property name="catalog" value="adighasProductCatalog" />
        <property name="net" value="false" />
        <property name="storeBaseDirectory" ref="adighasImportBaseDirectory" />
    </bean>
    
     <!-- 2) move the file to processing and setup header, partly site dependent -->
    <int:service-activator input-channel="batchFilesHeaderInit" output-channel="batchFilesHeader" ref="headerInitTask"
                           method="execute" />
    <bean id="headerInitTask" class="de.hybris.platform.acceleratorservices.dataimport.batch.task.HeaderInitTask">
    	<property name="sequenceIdParser" ref="batchSequenceIdParser"/>
        <property name="languageParser" ref="batchLanguageParser"/>
        <property name="fallbackLanguage" value="en" />
    </bean>
    <bean id="batchSequenceIdParser" class="de.hybris.platform.acceleratorservices.dataimport.batch.util.SequenceIdParser">
    	 <property name="parser">
            <bean class="de.hybris.platform.acceleratorservices.util.RegexParser">
                <property name="regex" value="-(\d+)\.csv" />
            </bean>
        </property>
    </bean>
     <bean id="batchLanguageParser" class="de.hybris.platform.acceleratorservices.util.RegexParser">
        <property name="regex" value="-(\w{2})-(\d+)\.csv" />
    </bean>
    <!-- 3) transform csv to impex file -->
    <int:service-activator input-channel="batchFilesHeader" output-channel="batchFilesTran" ref="batchTransformerTask"
                           method="execute" />
                           
    <bean id="batchTransformerTask"
          class="de.hybris.platform.acceleratorservices.dataimport.batch.task.ImpexTransformerTask"
          init-method="initConvertersMap">
        <property name="fieldSeparator" value=";" />
        <property name="encoding" value="UTF-8" />
        <property name="linesToSkip" value="0"/>
        <property name="cleanupHelper" ref="cleanupHelper" />
    </bean>
    
     <!-- Transformer converters mappings -->
    <bean id="batchProductConverterMapping"
          class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
          p:mapping="product"
          p:converter-ref="batchProductConverter"/>

	<!-- 4) run impex import -->
	<int:service-activator input-channel="batchFilesTran" output-channel="batchFilesImp" ref="batchRunnerTask"
                           method="execute" />
	<bean id="batchRunnerTask" class="de.hybris.platform.acceleratorservices.dataimport.batch.task.AbstractImpexRunnerTask">
        <property name="sessionService" ref="sessionService" />
        <property name="importService" ref="importService" />
        <lookup-method name="getImportConfig" bean="importConfig" />
    </bean>
    
    <bean id="importConfig" class="de.hybris.platform.servicelayer.impex.ImportConfig" scope="prototype">
        <property name="removeOnSuccess" value="false" />
        <property name="failOnError" value="false" />
        <property name="synchronous" value="true" />
        <property name="legacyMode" value="false" />
        <property name="locale" value="en"/>
    </bean>
    
     <!-- 5) Cleanup -->
    <int:service-activator input-channel="batchFilesImp" ref="batchCleanupTask" method="execute" />
    <bean id="batchCleanupTask" class="de.hybris.platform.acceleratorservices.dataimport.batch.task.CleanupTask">
        <property name="cleanupHelper" ref="cleanupHelper" />
    </bean>
    
     <!-- impex converters -->
    <!-- product import -->
    <bean id="defaultImpexUserHeader" class="java.lang.String">
        <constructor-arg>
            <value># Impex for product data
            	$version=Staged
                $productCatalog=adighasProductCatalog
                $productCV=catalogVersion(catalog(id[default=$productCatalog]),version[default=$version])
                $lang=en
                </value>
        </constructor-arg>
    </bean>
    
    <!-- Converters -->
    <bean id="batchProductConverter" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">
        <property name="header">
            <value>#{defaultImpexUserHeader}
                ## products
                INSERT_UPDATE $TYPE$;code[unique=true];name[lang=$lang];description[lang=$lang];$productCV[unique=true];recipe(code);approvalStatus(code);isTodaySpecial;
            </value>
        </property>
        <property name="impexRow">
            <value>;{+0};{+1};{2};;{3};{4};;</value>
        </property>
        <property name="type" value="Product"/>
    </bean>
	
</beans>