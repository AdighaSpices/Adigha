<?xml version="1.0" encoding="UTF-8"?>
<!--
 [y] hybris Platform

 Copyright (c) 2000-2016 SAP SE or an SAP affiliate company.
 All rights reserved.

 This software is the confidential and proprietary information of SAP
 ("Confidential Information"). You shall not disclose such Confidential
 Information and shall use it only in accordance with the terms of the
 license agreement you entered into with SAP.
-->

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:int="http://www.springframework.org/schema/integration"
    xmlns:file="http://www.springframework.org/schema/integration/file"
    xmlns:p="http://www.springframework.org/schema/p"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/integration
        http://www.springframework.org/schema/integration/spring-integration.xsd
        http://www.springframework.org/schema/integration/file
        http://www.springframework.org/schema/integration/file/spring-integration-file.xsd">
 
     <!-- General setup -->
    <int:channel id="errorChannel" />
    <int:service-activator input-channel="errorChannel" ref="errorHandler" method="onError" />
    <bean id="errorHandler" class="de.hybris.platform.acceleratorservices.dataimport.batch.task.ErrorHandler">
        <property name="cleanupHelper" ref="cleanupHelper" />
    </bean>
    <bean id="cleanupHelper" class="de.hybris.platform.acceleratorservices.dataimport.batch.task.CleanupHelper">
        <property name="timeStampFormat" value="yyyyMMddHHmmssSSS" />
    </bean>
 
 	<!-- 1) Base Directory -->
    <bean id="baseDirectoryHybris" class="java.lang.String">
        <constructor-arg value="#{configurationService.configuration.getProperty('adighas.batch.impex.basefolder')}/${tenantId}/hybris" />
    </bean>

    <!-- 1) Scan for files (used for internal Categories)-->
    <file:inbound-channel-adapter id="batchFilesHybrisInternal"
                                  directory="#{baseDirectoryHybris}/internal" filename-regex="^(.*)-(\d+)\.csv"
                                  comparator="fileOrderComparator">
        <int:poller fixed-rate="1000" />
    </file:inbound-channel-adapter>
 
    <!-- 2) move the file to processing and setup header -->
    <file:outbound-gateway request-channel="batchFilesHybrisInternal"
                           directory="#{baseDirectoryHybris}/processing"
                           reply-channel="batchFilesHybrisProc"
                           delete-source-files="true" filename-generator-expression="'internal_' + payload.name" />
 
    <int:service-activator input-channel="batchFilesHybrisProc" output-channel="batchFilesHeaderInit"
        ref="hybrisHeaderSetupTask" method="execute" />
 
    <bean id="hybrisHeaderSetupTask" class="de.hybris.platform.acceleratorservices.dataimport.batch.task.HeaderSetupTask">
        <property name="catalog" value="adighasProductCatalog" />
        <property name="net" value="false" />
        <property name="storeBaseDirectory" ref="baseDirectoryHybris" />
    </bean>
    
     <!-- 2) move the file to processing and setup header, partly site dependent -->
    <int:service-activator input-channel="batchFilesHeaderInit" output-channel="batchFilesHeader" ref="headerInitTask"
                           method="execute" />
    <bean id="headerInitTask" class="de.hybris.platform.acceleratorservices.dataimport.batch.task.HeaderInitTask">
        <property name="sequenceIdParser" ref="batchSequenceIdParser"/>
        <property name="languageParser" ref="batchLanguageParser"/>
        <property name="fallbackLanguage" value="en" />
    </bean>
    <bean id="batchSequenceIdParser" class="de.hybris.platform.acceleratorservices.dataimport.batch.util.SequenceIdParser">
        <property name="parser">
            <bean class="de.hybris.platform.acceleratorservices.util.RegexParser">
                <property name="regex" value="-(\d+)\.csv" />
            </bean>
        </property>
    </bean>
 
    <!-- 3) transform csv to impex file -->
    <int:service-activator input-channel="batchFilesHeader" output-channel="batchFilesTran" ref="batchTransformerTask"
                           method="execute" />
    <bean id="batchTransformerTask"
          class="de.hybris.platform.acceleratorservices.dataimport.batch.task.ImpexTransformerTask"
          init-method="initConvertersMap">
        <property name="fieldSeparator" value="," />
        <property name="encoding" value="UTF-8" />
        <property name="linesToSkip" value="0"/>
        <property name="cleanupHelper" ref="cleanupHelper" />
    </bean>

     <!-- 4) run impex import -->
    <int:service-activator input-channel="batchFilesTran" output-channel="batchFilesImp" ref="batchRunnerTask"
                           method="execute" />

    <bean id="batchRunnerTask" class="de.hybris.platform.acceleratorservices.dataimport.batch.task.AbstractImpexRunnerTask">
        <property name="sessionService" ref="sessionService" />
        <property name="importService" ref="importService" />
        <lookup-method name="getImportConfig" bean="importConfig" />
    </bean>

    <bean id="importConfig" class="de.hybris.platform.servicelayer.impex.ImportConfig" scope="prototype">
        <property name="removeOnSuccess" value="false" />
        <property name="failOnError" value="false" />
        <property name="synchronous" value="true" />
        <property name="legacyMode" value="false" />
        <property name="maxThreads" value="2" />
        <property name="locale" value="en"/>
    </bean>
 
     <!-- 5) Cleanup -->
    <int:service-activator input-channel="batchFilesImp" ref="batchCleanupTask" method="execute" />
    <bean id="batchCleanupTask" class="de.hybris.platform.acceleratorservices.dataimport.batch.task.CleanupTask">
        <property name="cleanupHelper" ref="cleanupHelper" />
    </bean>
 
    <!-- Transformer converters mappings -->
    <bean id="batchInternalCategoryConverterMapping"
          class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
          p:mapping="internal_base_category"
          p:converter-ref="batchInternalCategoryConverter"/>
 
  <bean id="batchInternalRecipeConverterMapping"
          class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping"
          p:mapping="internal_base_recipe"
          p:converter-ref="batchInternalRecipeConverter"/>
 
    <!-- impex converters -->
    <!-- product import -->
    <bean id="defaultImpexCategoryHeader" class="java.lang.String">
        <constructor-arg>
            <value># Catalog defaults
				$catalog=adighasProductCatalog
				
				$catalogVersion=catalogversion(catalog(id[default=$catalog]),version[default='Staged'])[unique=true,default=$catalog:Staged]
			</value>
        </constructor-arg>
    </bean>
    
     <!-- Converters -->
    <bean id="batchInternalCategoryConverter" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">
        <property name="header">
            <value>#{defaultImpexCategoryHeader}
                # Insert Category
                
                INSERT_UPDATE Category;code[unique=true];name;description;supercategories(code, $catalogVersion);allowedPrincipals(uid)[default='customergroup'];$catalogVersion
            </value>
        </property>
        <property name="impexRow">
            <value>;{+0};{1};{2};{3};{4};{5};</value>
        </property>
        <property name="type" value="Category"/>
    </bean>
    
     <bean id="batchInternalRecipeConverter" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">
        <property name="header">
            <value># Insert Recipes
					INSERT_UPDATE AdighaRecipe;code[unique=true];name;description;
 			</value>
        </property>
        <property name="impexRow">
            <value>;{+0};{1};{2};</value>
        </property>
        <property name="type" value="AdighaRecipe"/>
    </bean>
</beans>